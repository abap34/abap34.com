{
"meta": {
   "author": "abap34",   "css_setting": "assets/modern-light.css",   "date": "2024/02/22",   "description": "Julia言語で簡易処理系を爆速で作ります。",   "editor_theme": "ace/theme/xcode",   "github_id": "abap34",   "mail": "abap0002@gmail.com",   "ogp_url": "https://images.dog.ceo/breeds/dane-great/n02109047_6265.jpg",   "out_path": "public/posts/mini-lang.html",   "site_name": "abap34's blog",   "syntax_theme": "github.min",   "tag": "[日記, Julia, コンパイラ]",   "template_file": "assets/template.html",   "theme": "light",   "title": "3時間で作る自作言語のJuliaトランスパイラ",   "twitter_id": "abap34",   "twitter_site": "@abap34",   "url": "https://abap34.com/posts/mini-lang.html"} 
,
"ir": {"class":"Block","uuid":"0","childs":[{"class":"NewLine","uuid":"1"},{"class":"NewLine","uuid":"2"},{"class":"Header","level":"2","uuid":"3","childs":[{"class":"Block","uuid":"4","childs":[{"class":"Block","uuid":"5","childs":[{"class":"RawText","content":"Abstract","uuid":"6"}]}]}]},{"class":"NewLine","uuid":"7"},{"class":"ListBlock","uuid":"8","childs":[{"class":"Item","uuid":"9","childs":[{"class":"Block","uuid":"10","childs":[{"class":"Block","uuid":"11","childs":[{"class":"RawText","content":"Julia で簡単な処理系を作ります","uuid":"12"}]}]}]},{"class":"Item","uuid":"13","childs":[{"class":"Block","uuid":"14","childs":[{"class":"Block","uuid":"15","childs":[{"class":"RawText","content":"PEG.jl を使うと簡単に厳密な構文を定義・解析できます","uuid":"16"}]}]}]},{"class":"Item","uuid":"17","childs":[{"class":"Block","uuid":"18","childs":[{"class":"Block","uuid":"19","childs":[{"class":"RawText","content":"入力をJuliaのASTに変換して実行する方式だと簡単にできて便利で楽しいです","uuid":"20"}]}]}]}]},{"class":"NewLine","uuid":"21"},{"class":"Header","level":"2","uuid":"22","childs":[{"class":"Block","uuid":"23","childs":[{"class":"Block","uuid":"24","childs":[{"class":"RawText","content":"はじめに","uuid":"25"}]}]}]},{"class":"NewLine","uuid":"26"},{"class":"Block","uuid":"27","childs":[{"class":"Block","uuid":"28","childs":[{"class":"RawText","content":"I県の国立T大学の講義では、簡易インタプリタを作る課題が出るらしいです。","uuid":"29"}]}]},{"class":"NewLine","uuid":"30"},{"class":"Block","uuid":"31","childs":[{"class":"Block","uuid":"32","childs":[{"class":"RawText","content":"また、言語が指定されていないようで色々な言語での実装を GitHubで見かけて、","uuid":"33"}]}]},{"class":"Block","uuid":"34","childs":[{"class":"Block","uuid":"35","childs":[{"class":"Block","uuid":"37","childs":[{"class":"RawText","content":"","uuid":"38"}]},{"alt":"実装がまとまっているgist","class":"InlineUrl","url":"https://gist.github.com/eggplants/fbd3422839653b211b314d2bb151c1d7","uuid":"36"},{"class":"Block","uuid":"39","childs":[{"class":"RawText","content":" なんかもあったりしていいなぁと思ったので Juliaでも作ってみました。","uuid":"40"}]}]}]},{"class":"NewLine","uuid":"41"},{"class":"NewLine","uuid":"42"},{"class":"Block","uuid":"43","childs":[{"class":"Block","uuid":"44","childs":[{"class":"Block","uuid":"46","childs":[{"class":"RawText","content":"というか ","uuid":"47"}]},{"alt":"元の講義","class":"InlineUrl","url":"https://kdb.tsukuba.ac.jp/syllabi/2022/GB27001/jpn/0","uuid":"45"},{"class":"Block","uuid":"48","childs":[{"class":"RawText","content":" がイケてるエンジニアの人呼んで面白そうな話が並んでいて羨ましいです。","uuid":"49"}]}]}]},{"class":"Block","uuid":"50","childs":[{"class":"Block","uuid":"51","childs":[{"class":"RawText","content":"T工業大学でも同じようなテイスト(卒業生が来る系)の講義があったような気がしますが、卒業生でえんえんビジネス人生を語る皆様がたくさんいらっしゃるのでそういう話に興味がある人が受講するといいかもしれません。","uuid":"52"}]}]},{"class":"NewLine","uuid":"53"},{"class":"NewLine","uuid":"54"},{"class":"Block","uuid":"55","childs":[{"class":"Block","uuid":"56","childs":[{"class":"RawText","content":"それはそれとして、いろんな言語で実装されてるなら自分もなんかでやりたくなってくるところです。","uuid":"57"}]}]},{"class":"NewLine","uuid":"58"},{"class":"Block","uuid":"59","childs":[{"class":"Block","uuid":"60","childs":[{"class":"RawText","content":"今までの自分の構文解析遍歴は、","uuid":"61"}]}]},{"class":"NewLine","uuid":"62"},{"class":"ListBlock","uuid":"63","childs":[{"class":"Item","uuid":"64","childs":[{"class":"Block","uuid":"65","childs":[{"class":"Block","uuid":"66","childs":[{"class":"RawText","content":"講義(形式言語とオートマトン) で理論かじったり","uuid":"67"}]}]}]},{"class":"Item","uuid":"68","childs":[{"class":"Block","uuid":"69","childs":[{"class":"Block","uuid":"70","childs":[{"class":"Block","uuid":"72","childs":[{"class":"RawText","content":"自作の拡張 Markdownパーサの ","uuid":"73"}]},{"alt":"ALMO","class":"InlineUrl","url":"https://github.com/abap34/ALMO","uuid":"71"},{"class":"Block","uuid":"74","childs":[{"class":"RawText","content":" とか ","uuid":"75"}]}]}]}]},{"class":"Item","uuid":"76","childs":[{"class":"Block","uuid":"77","childs":[{"class":"Block","uuid":"78","childs":[{"class":"RawText","content":"大学のアセンブリ言語の課題で数式をパースしてみたり ","uuid":"79"}]}]}]}]},{"class":"NewLine","uuid":"80"},{"class":"Block","uuid":"81","childs":[{"class":"Block","uuid":"82","childs":[{"class":"RawText","content":"みたいな感じなのですが、 C/C++ でしかやったことがありません。","uuid":"83"}]}]},{"class":"Block","uuid":"84","childs":[{"class":"Block","uuid":"85","childs":[{"class":"RawText","content":"C++ はまだしも Cは全然自分の手足感がないので、慣れている Python / Julia あたりでやりたいと思っていて、","uuid":"86"}]}]},{"class":"Block","uuid":"87","childs":[{"class":"Block","uuid":"88","childs":[{"class":"RawText","content":"さっきの gist をみていると Python実装はもう結構あるみたいなので Juliaでやってみることにします。","uuid":"89"}]}]},{"class":"NewLine","uuid":"90"},{"class":"NewLine","uuid":"91"},{"class":"Block","uuid":"92","childs":[{"class":"Block","uuid":"93","childs":[{"class":"RawText","content":"それに加えて、自分で素のパーサを書くのは Markdownパーサを書いたときに、もうこりごりだ〜〜(本当に)と思ったので、今回はパーサジェネレータを使っていい感じにやることに決めました。","uuid":"94"}]}]},{"class":"Block","uuid":"95","childs":[{"class":"Block","uuid":"96","childs":[{"class":"RawText","content":"(Markdown の仕様によるところもある気がしますが...)","uuid":"97"}]}]},{"class":"NewLine","uuid":"98"},{"class":"Header","level":"2","uuid":"99","childs":[{"class":"Block","uuid":"100","childs":[{"class":"Block","uuid":"101","childs":[{"class":"RawText","content":"PEG.jl で構文を書く","uuid":"102"}]}]}]},{"class":"Header","level":"3","uuid":"103","childs":[{"class":"Block","uuid":"104","childs":[{"class":"Block","uuid":"105","childs":[{"class":"RawText","content":"PEG とは","uuid":"106"}]}]}]},{"class":"NewLine","uuid":"107"},{"class":"Block","uuid":"108","childs":[{"class":"Block","uuid":"109","childs":[{"class":"RawText","content":"さて、プログラミング言語を作るからにはパーサを作らなくてはいけないですが、今回は","uuid":"110"}]}]},{"class":"NewLine","uuid":"111"},{"class":"NewLine","uuid":"112"},{"class":"Block","uuid":"113","childs":[{"class":"Block","uuid":"114","childs":[{"class":"RawText","content":"<a href=\u0022https://github.com/wdebeaum/PEG.jl\u0022><img src=\u0022https://gh-card.dev/repos/wdebeaum/PEG.jl.svg?fullname=\u0022></a>","uuid":"115"}]}]},{"class":"NewLine","uuid":"116"},{"class":"NewLine","uuid":"117"},{"class":"Block","uuid":"118","childs":[{"class":"Block","uuid":"119","childs":[{"class":"RawText","content":"を使います。","uuid":"120"}]}]},{"class":"NewLine","uuid":"121"},{"class":"Block","uuid":"122","childs":[{"class":"Block","uuid":"123","childs":[{"class":"RawText","content":"そもそも PEGという耳馴染みのない(僕はありませんでした)という単語について説明しておきます。","uuid":"124"}]}]},{"class":"NewLine","uuid":"125"},{"class":"Block","uuid":"126","childs":[{"class":"Block","uuid":"127","childs":[{"class":"RawText","content":"PEGは Parsing Expression Grammar の略で、日本語だと解析表現文法とか言われるものです。 ","uuid":"128"}]}]},{"class":"NewLine","uuid":"129"},{"class":"NewLine","uuid":"130"},{"class":"Block","uuid":"131","childs":[{"class":"Block","uuid":"132","childs":[{"class":"Block","uuid":"134","childs":[{"class":"RawText","content":"その名の通り文法なのですが、多くのプログラミング言語の構文の記述に使われる ","uuid":"135"}]},{"class":"InlineMath","expr":"^1","uuid":"133"},{"class":"Block","uuid":"136","childs":[{"class":"RawText","content":" 文脈自由文法とは違い、","uuid":"137"}]}]}]},{"class":"Block","uuid":"138","childs":[{"class":"Block","uuid":"139","childs":[{"class":"RawText","content":"構文木が常に一意に定まるという特徴があります。","uuid":"140"}]}]},{"class":"NewLine","uuid":"141"},{"class":"NewLine","uuid":"142"},{"class":"Block","uuid":"143","childs":[{"class":"Block","uuid":"144","childs":[{"class":"Block","uuid":"146","childs":[{"class":"RawText","content":"さらに、PEGは文脈自由文法ではできない ","uuid":"147"}]},{"class":"InlineMath","expr":"\u005c{a^n b^n c^n \u005cmid n \u005cge 1\u005c}","uuid":"145"},{"class":"Block","uuid":"148","childs":[{"class":"RawText","content":" を受理する構文を定義することができ、","uuid":"149"}]}]}]},{"class":"Block","uuid":"150","childs":[{"class":"Block","uuid":"151","childs":[{"class":"RawText","content":"また 「PEGで記述不可能だが文脈自由文法で記述可能な構文」 は今のところ見つかっていないので、","uuid":"152"}]}]},{"class":"Block","uuid":"153","childs":[{"class":"Block","uuid":"154","childs":[{"class":"RawText","content":"PEGは文脈自由文法よりも表現力のある文法だと考えられているようです。","uuid":"155"}]}]},{"class":"NewLine","uuid":"156"},{"class":"NewLine","uuid":"157"},{"class":"Block","uuid":"158","childs":[{"class":"Block","uuid":"159","childs":[{"class":"RawText","content":"PEGは、技術としては思ったよりだいぶ最近のもので、なんと提案されたのは 2004年です。 ","uuid":"160"}]}]},{"class":"Block","uuid":"161","childs":[{"class":"Block","uuid":"162","childs":[{"class":"RawText","content":"大学の講義でも多分扱っていなかったと思うのですが(先生へ: 扱ってたらすいません)、たまたま大学図書館で","uuid":"163"}]}]},{"class":"Block","uuid":"164","childs":[{"class":"Block","uuid":"165","childs":[{"class":"Block","uuid":"167","childs":[{"class":"RawText","content":"","uuid":"168"}]},{"alt":"Pythonで学ぶ解析表現文法と構文解析","class":"InlineUrl","url":"https://www.morikita.co.jp/books/mid/085651","uuid":"166"},{"class":"Block","uuid":"169","childs":[{"class":"RawText","content":"  という本を見つけて読んでへ〜となったので使ってみることにしました。","uuid":"170"}]}]}]},{"class":"NewLine","uuid":"171"},{"class":"Block","uuid":"172","childs":[{"class":"Block","uuid":"173","childs":[{"class":"RawText","content":"(この本では構文解析自体の説明から平易に書かれていて実装もPythonで読みやすく、おすすめです。最後の方の章の計算量とかのところでこれは大丈夫か...? と思うところもありますが、全体としては実践的で好きです。)","uuid":"174"}]}]},{"class":"NewLine","uuid":"175"},{"class":"Block","uuid":"176","childs":[{"class":"Block","uuid":"177","childs":[{"class":"RawText","content":"しかも、Python 3.9からはPythonのパーサがPEGベースになり、JuliaのパーサもScheme製だったのが Julia製になって Syntax Error がだいぶ見やすくなったりと、","uuid":"178"}]}]},{"class":"Block","uuid":"179","childs":[{"class":"Block","uuid":"180","childs":[{"class":"RawText","content":"世はまさに大パーサ改善時代と言えそうです。","uuid":"181"}]}]},{"class":"NewLine","uuid":"182"},{"class":"NewLine","uuid":"183"},{"class":"Block","uuid":"184","childs":[{"class":"Block","uuid":"185","childs":[{"class":"RawText","content":"構文解析がそこまで最近に進化しているのは正直イメージと違ったのでびっくりしました。　もっと早く知ってたらもう少しオートマトンにやる気が出たかもしれない...","uuid":"186"}]}]},{"class":"NewLine","uuid":"187"},{"class":"Header","level":"3","uuid":"188","childs":[{"class":"Block","uuid":"189","childs":[{"class":"Block","uuid":"190","childs":[{"class":"RawText","content":"PEG の特徴と PEG.jl を使った実践","uuid":"191"}]}]}]},{"class":"NewLine","uuid":"192"},{"class":"Block","uuid":"193","childs":[{"class":"Block","uuid":"194","childs":[{"class":"RawText","content":"PEG.jl はそんな PEGを使って構文を定義・解析してくれるライブラリです。","uuid":"195"}]}]},{"class":"Block","uuid":"196","childs":[{"class":"Block","uuid":"197","childs":[{"class":"RawText","content":"最終更新はとても前ですが、READMEに書いてある通り機能がすでに十分に揃っているので特に困るポイントはありません。","uuid":"198"}]}]},{"class":"NewLine","uuid":"199"},{"class":"Block","uuid":"200","childs":[{"class":"Block","uuid":"201","childs":[{"class":"RawText","content":"さて、PEG.jl を使って構文を定義してみます。","uuid":"202"}]}]},{"class":"Block","uuid":"203","childs":[{"class":"Block","uuid":"204","childs":[{"class":"RawText","content":"見た目は拡張BNF記法そっくりで、直感的に書けるのでとても使いやすいです。","uuid":"205"}]}]},{"class":"NewLine","uuid":"206"},{"class":"Block","uuid":"207","childs":[{"class":"Block","uuid":"208","childs":[{"class":"RawText","content":"例えば、一桁の数字同士の足し算を定義するとこんな感じになります。","uuid":"209"}]}]},{"class":"NewLine","uuid":"210"},{"class":"CodeBlock","code":"julia> using PEG\u000a\u000ajulia> @rule add = r\u0022[0-9]\u0022 & \u0022+\u0022 & r\u0022[0-9]\u0022  # 一桁の足し算\u000aadd (generic function with 2 methods)\u000a\u000ajulia> parse_whole(add, \u00221+2\u0022)\u000a3-element Vector{Any}:\u000a \u00221\u0022\u000a \u0022+\u0022\u000a \u00222\u0022\u000a","language":"julia","uuid":"211"},{"class":"NewLine","uuid":"212"},{"class":"Block","uuid":"213","childs":[{"class":"Block","uuid":"214","childs":[{"class":"RawText","content":"このように、","uuid":"215"}]}]},{"class":"NewLine","uuid":"216"},{"class":"ListBlock","uuid":"217","childs":[{"class":"Item","uuid":"218","childs":[{"class":"Block","uuid":"219","childs":[{"class":"Block","uuid":"220","childs":[{"class":"Block","uuid":"222","childs":[{"class":"RawText","content":"","uuid":"223"}]},{"class":"InlineCodeBlock","code":"@rule","uuid":"221"},{"class":"Block","uuid":"224","childs":[{"class":"RawText","content":" マクロでルールを定義","uuid":"225"}]}]}]}]},{"class":"Item","uuid":"226","childs":[{"class":"Block","uuid":"227","childs":[{"class":"Block","uuid":"228","childs":[{"class":"Block","uuid":"230","childs":[{"class":"RawText","content":"","uuid":"231"}]},{"class":"InlineCodeBlock","code":"parse_whole(rule, src)","uuid":"229"},{"class":"Block","uuid":"232","childs":[{"class":"RawText","content":" でパース","uuid":"233"}]}]}]}]}]},{"class":"NewLine","uuid":"234"},{"class":"Block","uuid":"235","childs":[{"class":"Block","uuid":"236","childs":[{"class":"RawText","content":"という 2ステップで簡単に構文を定義・解析できます。","uuid":"237"}]}]},{"class":"NewLine","uuid":"238"},{"class":"Block","uuid":"239","childs":[{"class":"Block","uuid":"240","childs":[{"class":"Block","uuid":"242","childs":[{"class":"RawText","content":"さらに、 ","uuid":"243"}]},{"class":"InlineCodeBlock","code":"@rule","uuid":"241"},{"class":"Block","uuid":"244","childs":[{"class":"RawText","content":" ではパース結果を渡す関数も同時に定義できます。","uuid":"245"}]}]}]},{"class":"NewLine","uuid":"246"},{"class":"Block","uuid":"247","childs":[{"class":"Block","uuid":"248","childs":[{"class":"Block","uuid":"250","childs":[{"class":"Block","uuid":"252","childs":[{"class":"RawText","content":"例えば、 文字列 ","uuid":"253"}]},{"class":"InlineCodeBlock","code":"x","uuid":"251"},{"class":"Block","uuid":"254","childs":[{"class":"RawText","content":" を ","uuid":"255"}]}]},{"class":"InlineCodeBlock","code":"parse(Int, x)","uuid":"249"},{"class":"Block","uuid":"256","childs":[{"class":"RawText","content":"  で整数に変換して、計算式をその場で評価してみます。","uuid":"257"}]}]}]},{"class":"NewLine","uuid":"258"},{"class":"CodeBlock","code":"julia> @rule add = (r\u0022[0-9]\u0022 & \u0022+\u0022 & r\u0022[0-9]\u0022) |>  (w -> (parse(Int, w[1]) + parse(Int, w[3])))\u000aadd (generic function with 2 methods)\u000a\u000ajulia> parse_whole(add, \u00221+2\u0022)\u000a3\u000a\u000ajulia> parse_whole(add, \u00221+4\u0022)\u000a5\u000a","language":"julia","uuid":"259"},{"class":"NewLine","uuid":"260"},{"class":"Block","uuid":"261","childs":[{"class":"Block","uuid":"262","childs":[{"class":"RawText","content":"足し算のパース・解釈ができるようになりました。","uuid":"263"}]}]},{"class":"NewLine","uuid":"264"},{"class":"NewLine","uuid":"265"},{"class":"NewLine","uuid":"266"},{"class":"Block","uuid":"267","childs":[{"class":"Block","uuid":"268","childs":[{"class":"RawText","content":"ここまでだとあまりBNFと変わらないように見えますが、違うポイントを見てみます。","uuid":"269"}]}]},{"class":"NewLine","uuid":"270"},{"class":"Block","uuid":"271","childs":[{"class":"Block","uuid":"272","childs":[{"class":"Block","uuid":"274","childs":[{"class":"Block","uuid":"276","childs":[{"class":"RawText","content":"といっても違うポイントは一つだけで、選言(","uuid":"277"}]},{"class":"InlineCodeBlock","code":"|","uuid":"275"},{"class":"Block","uuid":"278","childs":[{"class":"RawText","content":") と順序付き選言(","uuid":"279"}]}]},{"class":"InlineCodeBlock","code":"/","uuid":"273"},{"class":"Block","uuid":"280","childs":[{"class":"RawText","content":") です。","uuid":"281"}]}]}]},{"class":"NewLine","uuid":"282"},{"class":"Block","uuid":"283","childs":[{"class":"Block","uuid":"284","childs":[{"class":"RawText","content":"例えば BNF記法で","uuid":"285"}]}]},{"class":"NewLine","uuid":"286"},{"class":"CodeBlock","code":"A ::= B | C\u000a","language":"plaintext","uuid":"287"},{"class":"NewLine","uuid":"288"},{"class":"Block","uuid":"289","childs":[{"class":"Block","uuid":"290","childs":[{"class":"Block","uuid":"292","childs":[{"class":"Block","uuid":"294","childs":[{"class":"Block","uuid":"296","childs":[{"class":"RawText","content":"と書いた場合、 ","uuid":"297"}]},{"class":"InlineCodeBlock","code":"A","uuid":"295"},{"class":"Block","uuid":"298","childs":[{"class":"RawText","content":" は ","uuid":"299"}]}]},{"class":"InlineCodeBlock","code":"B","uuid":"293"},{"class":"Block","uuid":"300","childs":[{"class":"RawText","content":" または ","uuid":"301"}]}]},{"class":"InlineCodeBlock","code":"C","uuid":"291"},{"class":"Block","uuid":"302","childs":[{"class":"RawText","content":" どちらにマッチしてもかまいません。","uuid":"303"}]}]}]},{"class":"NewLine","uuid":"304"},{"class":"NewLine","uuid":"305"},{"class":"Block","uuid":"306","childs":[{"class":"Block","uuid":"307","childs":[{"class":"RawText","content":"これにたいして PEG では順序付きの選言を使います。","uuid":"308"}]}]},{"class":"NewLine","uuid":"309"},{"class":"CodeBlock","code":"A = B / C\u000a","language":"plaintext","uuid":"310"},{"class":"NewLine","uuid":"311"},{"class":"Block","uuid":"312","childs":[{"class":"Block","uuid":"313","childs":[{"class":"Block","uuid":"315","childs":[{"class":"Block","uuid":"317","childs":[{"class":"Block","uuid":"319","childs":[{"class":"Block","uuid":"321","childs":[{"class":"RawText","content":"と書いたとき、 ","uuid":"322"}]},{"class":"InlineCodeBlock","code":"A","uuid":"320"},{"class":"Block","uuid":"323","childs":[{"class":"RawText","content":" は ","uuid":"324"}]}]},{"class":"InlineCodeBlock","code":"B","uuid":"318"},{"class":"Block","uuid":"325","childs":[{"class":"RawText","content":" にマッチするか試し、成功したら ","uuid":"326"}]}]},{"class":"InlineCodeBlock","code":"B","uuid":"316"},{"class":"Block","uuid":"327","childs":[{"class":"RawText","content":" にマッチし、そして失敗したその時に限り ","uuid":"328"}]}]},{"class":"InlineCodeBlock","code":"C","uuid":"314"},{"class":"Block","uuid":"329","childs":[{"class":"RawText","content":" にマッチを試みます。","uuid":"330"}]}]}]},{"class":"NewLine","uuid":"331"},{"class":"Block","uuid":"332","childs":[{"class":"Block","uuid":"333","childs":[{"class":"RawText","content":"したがって結果は必ず一意に定まります。","uuid":"334"}]}]},{"class":"NewLine","uuid":"335"},{"class":"NewLine","uuid":"336"},{"class":"Block","uuid":"337","childs":[{"class":"Block","uuid":"338","childs":[{"class":"Block","uuid":"340","childs":[{"class":"RawText","content":"さらに、これは選言がプログラムでの ","uuid":"341"}]},{"class":"InlineCodeBlock","code":"||","uuid":"339"},{"class":"Block","uuid":"342","childs":[{"class":"RawText","content":" に対応してほしいという気持ちになると割と自然です。","uuid":"343"}]}]}]},{"class":"Block","uuid":"344","childs":[{"class":"Block","uuid":"345","childs":[{"class":"Block","uuid":"347","childs":[{"class":"Block","uuid":"349","childs":[{"class":"Block","uuid":"351","childs":[{"class":"Block","uuid":"353","childs":[{"class":"RawText","content":"ふつうの処理系では ","uuid":"354"}]},{"class":"InlineCodeBlock","code":"(f() > 0) || (g() > 0)","uuid":"352"},{"class":"Block","uuid":"355","childs":[{"class":"RawText","content":" という式の ","uuid":"356"}]}]},{"class":"InlineCodeBlock","code":"g","uuid":"350"},{"class":"Block","uuid":"357","childs":[{"class":"RawText","content":" は短絡評価で ","uuid":"358"}]}]},{"class":"InlineCodeBlock","code":"f() > 0","uuid":"348"},{"class":"Block","uuid":"359","childs":[{"class":"RawText","content":" が　","uuid":"360"}]}]},{"class":"InlineCodeBlock","code":"false","uuid":"346"},{"class":"Block","uuid":"361","childs":[{"class":"RawText","content":" だったその時に限り評価されるわけですから、","uuid":"362"}]}]}]},{"class":"Block","uuid":"363","childs":[{"class":"Block","uuid":"364","childs":[{"class":"Block","uuid":"366","childs":[{"class":"RawText","content":"どちらかというと順序付きの選言の方が ","uuid":"367"}]},{"class":"InlineCodeBlock","code":"||","uuid":"365"},{"class":"Block","uuid":"368","childs":[{"class":"RawText","content":" に近い感じがします。","uuid":"369"}]}]}]},{"class":"NewLine","uuid":"370"},{"class":"Header","level":"3","uuid":"371","childs":[{"class":"Block","uuid":"372","childs":[{"class":"Block","uuid":"373","childs":[{"class":"RawText","content":"Julia の ASTへの変換","uuid":"374"}]}]}]},{"class":"NewLine","uuid":"375"},{"class":"Block","uuid":"376","childs":[{"class":"Block","uuid":"377","childs":[{"class":"RawText","content":"上の例ではパースしたものをその場で解釈していましたが、これだと評価を自分で書く必要があってめんどくさいため、誰かに実行をやってほしくなります。","uuid":"378"}]}]},{"class":"NewLine","uuid":"379"},{"class":"Block","uuid":"380","childs":[{"class":"Block","uuid":"381","childs":[{"class":"RawText","content":"…よくよく考えてみるとパースを動かしている処理系、Juliaがすでに手元にあるわけですから、なんならパースだけでなく実行もやってほしいような気がします。","uuid":"382"}]}]},{"class":"NewLine","uuid":"383"},{"class":"NewLine","uuid":"384"},{"class":"Block","uuid":"385","childs":[{"class":"Block","uuid":"386","childs":[{"class":"Block","uuid":"388","childs":[{"class":"RawText","content":"","uuid":"389"}]},{"class":"InlineStrong","uuid":"387","childs":[{"class":"Block","uuid":"390","childs":[{"class":"RawText","content":"つまりは、Juliaへのトランスパイラが書きたくなってきます。","uuid":"391"}]}]},{"class":"Block","uuid":"392","childs":[{"class":"RawText","content":"","uuid":"393"}]}]}]},{"class":"NewLine","uuid":"394"},{"class":"NewLine","uuid":"395"},{"class":"Block","uuid":"396","childs":[{"class":"Block","uuid":"397","childs":[{"class":"RawText","content":"大変な仕事に見える人もいるかもしれませんが、実はこれは本当に簡単な作業です。","uuid":"398"}]}]},{"class":"NewLine","uuid":"399"},{"class":"NewLine","uuid":"400"},{"class":"Block","uuid":"401","childs":[{"class":"Block","uuid":"402","childs":[{"class":"RawText","content":"Julia はそれ自身の構文を普通のデータとして扱うことができます。","uuid":"403"}]}]},{"class":"Block","uuid":"404","childs":[{"class":"Block","uuid":"405","childs":[{"class":"RawText","content":"これは同図像性(Homoiconicity)などと呼ばれる性質で、同様の性質を持つ言語として、代表的なものに Lisp があります。","uuid":"406"}]}]},{"class":"NewLine","uuid":"407"},{"class":"Block","uuid":"408","childs":[{"class":"Block","uuid":"409","childs":[{"class":"RawText","content":"Lisp の構文はただの(?) リストなので、 Lisp のコードの表現は Lisp の基本的なデータ構造に過ぎません。","uuid":"410"}]}]},{"class":"NewLine","uuid":"411"},{"class":"NewLine","uuid":"412"},{"class":"Block","uuid":"413","childs":[{"class":"Block","uuid":"414","childs":[{"class":"Block","uuid":"416","childs":[{"class":"RawText","content":"Julia においては、 ","uuid":"417"}]},{"class":"InlineCodeBlock","code":"Expr","uuid":"415"},{"class":"Block","uuid":"418","childs":[{"class":"RawText","content":" 型によってその構文を表現できます。実例で見てみます。 ","uuid":"419"}]}]}]},{"class":"NewLine","uuid":"420"},{"class":"Block","uuid":"421","childs":[{"class":"Block","uuid":"422","childs":[{"class":"RawText","content":"(出力は一部省略しています)","uuid":"423"}]}]},{"class":"NewLine","uuid":"424"},{"class":"CodeBlock","code":"julia> ex = quote\u000a                  x = 10\u000a                  y = x * 2\u000a                  if y > 15\u000a                      println(\u0022OK\u0022)\u000a                  else\u000a                      println(\u0022!?\u0022)\u000a                  end\u000a            end\u000a\u000ajulia> typeof(ex)\u000aExpr\u000a\u000ajulia> dump(ex)\u000aExpr\u000a  head: Symbol block\u000a  args: Array{Any}((6,))\u000a    1: LineNumberNode\u000a      line: Int64 2\u000a      file: Symbol REPL[16]\u000a    2: Expr\u000a      head: Symbol =\u000a    ...\u000a    5: LineNumberNode\u000a      line: Int64 4\u000a      file: Symbol REPL[16]\u000a    6: Expr\u000a      head: Symbol if\u000a      args: Array{Any}((3,))\u000a        1: Expr\u000a          head: Symbol call\u000a          args: Array{Any}((3,))\u000a            1: Symbol >\u000a            ...\u000a            2: Expr\u000a              head: Symbol call\u000a              args: Array{Any}((2,))\u000a                1: Symbol println\u000a                2: String \u0022!?\u0022\u000a","language":"julia","uuid":"425"},{"class":"NewLine","uuid":"426"},{"class":"Block","uuid":"427","childs":[{"class":"Block","uuid":"428","childs":[{"class":"Block","uuid":"430","childs":[{"class":"RawText","content":"","uuid":"431"}]},{"class":"InlineCodeBlock","code":"quote ... end","uuid":"429"},{"class":"Block","uuid":"432","childs":[{"class":"RawText","content":" で囲むと中の式を評価せずに、その式自体の構造、つまりはASTを得ることができます。","uuid":"433"}]}]}]},{"class":"Block","uuid":"434","childs":[{"class":"Block","uuid":"435","childs":[{"class":"Block","uuid":"437","childs":[{"class":"Block","uuid":"439","childs":[{"class":"Block","uuid":"441","childs":[{"class":"RawText","content":"これは ","uuid":"442"}]},{"class":"InlineCodeBlock","code":"typeof","uuid":"440"},{"class":"Block","uuid":"443","childs":[{"class":"RawText","content":" でわかるように ","uuid":"444"}]}]},{"class":"InlineCodeBlock","code":"Expr","uuid":"438"},{"class":"Block","uuid":"445","childs":[{"class":"RawText","content":" 型で保持されていて、 ","uuid":"446"}]}]},{"class":"InlineCodeBlock","code":"dump","uuid":"436"},{"class":"Block","uuid":"447","childs":[{"class":"RawText","content":" で中身を見ると、確かに元の式の構造っぽいものが保存されているようです。","uuid":"448"}]}]}]},{"class":"NewLine","uuid":"449"},{"class":"Block","uuid":"450","childs":[{"class":"Block","uuid":"451","childs":[{"class":"RawText","content":"あるいは、 S式の形で出力することもできます。","uuid":"452"}]}]},{"class":"NewLine","uuid":"453"},{"class":"CodeBlock","code":"julia> Meta.show_sexpr(ex)\u000a(:block,\u000a  :(#= REPL[50]:2 =#),\u000a  (:(=), :x, 10),\u000a  :(#= REPL[50]:3 =#),\u000a  (:(=), :y, (:call, :*, :x, 2)),\u000a  :(#= REPL[50]:4 =#),\u000a  (:if, (:call, :>, :y, 15), (:block,\u000a      :(#= REPL[50]:5 =#),\u000a      (:call, :println, \u0022OK\u0022)\u000a    ), (:block,\u000a      :(#= REPL[50]:7 =#),\u000a      (:call, :println, \u0022!?\u0022)\u000a    ))\u000a)\u000a","language":"julia","uuid":"454"},{"class":"NewLine","uuid":"455"},{"class":"Block","uuid":"456","childs":[{"class":"Block","uuid":"457","childs":[{"class":"RawText","content":"そしてこのASTを作る手段は当然開かれています。","uuid":"458"}]}]},{"class":"NewLine","uuid":"459"},{"class":"Block","uuid":"460","childs":[{"class":"Block","uuid":"461","childs":[{"class":"Block","uuid":"463","childs":[{"class":"RawText","content":"例えば、 ","uuid":"464"}]},{"class":"InlineCodeBlock","code":"1 + 2","uuid":"462"},{"class":"Block","uuid":"465","childs":[{"class":"RawText","content":" を計算して出力するようなASTを、「手で」作ってみることにします","uuid":"466"}]}]}]},{"class":"NewLine","uuid":"467"},{"class":"NewLine","uuid":"468"},{"class":"CodeBlock","code":"julia> ex = Expr(:call, :println, Expr(:call, :+, 1, 2))\u000a:(println(1 + 2))\u000a\u000ajulia> println(ex) \u000aprintln(1 + 2)\u000a\u000ajulia> eval(ex)\u000a3\u000a","language":"julia","uuid":"469"},{"class":"NewLine","uuid":"470"},{"class":"Block","uuid":"471","childs":[{"class":"Block","uuid":"472","childs":[{"class":"Block","uuid":"474","childs":[{"class":"RawText","content":"こんな感じで、 ASTを直接作って、 ","uuid":"475"}]},{"class":"InlineCodeBlock","code":"println(1+2)","uuid":"473"},{"class":"Block","uuid":"476","childs":[{"class":"RawText","content":" に相当するコードを表現・実行することができました。","uuid":"477"}]}]}]},{"class":"NewLine","uuid":"478"},{"class":"Block","uuid":"479","childs":[{"class":"Block","uuid":"480","childs":[{"class":"Block","uuid":"482","childs":[{"class":"RawText","content":"(","uuid":"483"}]},{"class":"InlineCodeBlock","code":"println(ex)","uuid":"481"},{"class":"Block","uuid":"484","childs":[{"class":"RawText","content":" によって、式の結果ではなく式そのものが保持されていることがわかることに注目してください！)","uuid":"485"}]}]}]},{"class":"NewLine","uuid":"486"},{"class":"Block","uuid":"487","childs":[{"class":"Block","uuid":"488","childs":[{"class":"RawText","content":"これで、最初の例の足し算のパーサを書き換えて、ASTを作るようにすれば、自動的にJuliaのコードに変換できるようになります。","uuid":"489"}]}]},{"class":"NewLine","uuid":"490"},{"class":"CodeBlock","code":"julia> @rule add = (r\u0022[0-9]\u0022 & \u0022+\u0022 & r\u0022[0-9]\u0022) |>  (w -> Expr(:call, :+, parse(Int, w[1]), parse(Int, w[3])))\u000aadd (generic function with 2 methods)\u000a\u000ajulia> parse_whole(add, \u00221+2\u0022)\u000a:(1 + 2)\u000a\u000ajulia> eval(ans)\u000a3\u000a","language":"","uuid":"491"},{"class":"NewLine","uuid":"492"},{"class":"Block","uuid":"493","childs":[{"class":"Block","uuid":"494","childs":[{"class":"Block","uuid":"496","childs":[{"class":"Block","uuid":"498","childs":[{"class":"Block","uuid":"500","childs":[{"class":"RawText","content":"","uuid":"501"}]},{"class":"InlineCodeBlock","code":"\u00221+2\u0022","uuid":"499"},{"class":"Block","uuid":"502","childs":[{"class":"RawText","content":" という単なる文字列から ","uuid":"503"}]}]},{"class":"InlineCodeBlock","code":"1 + 2","uuid":"497"},{"class":"Block","uuid":"504","childs":[{"class":"RawText","content":" を表現する ","uuid":"505"}]}]},{"class":"InlineStrong","uuid":"495","childs":[{"class":"Block","uuid":"506","childs":[{"class":"RawText","content":"Juliaの","uuid":"507"}]}]},{"class":"Block","uuid":"508","childs":[{"class":"RawText","content":" AST を得ることができました。","uuid":"509"}]}]}]},{"class":"Block","uuid":"510","childs":[{"class":"Block","uuid":"511","childs":[{"class":"RawText","content":"つまり、","uuid":"512"}]}]},{"class":"NewLine","uuid":"513"},{"class":"Block","uuid":"514","childs":[{"class":"Block","uuid":"515","childs":[{"class":"Block","uuid":"517","childs":[{"class":"RawText","content":"🎉 ","uuid":"518"}]},{"class":"InlineStrong","uuid":"516","childs":[{"class":"Block","uuid":"519","childs":[{"class":"RawText","content":"まさに今、自作言語をJuliaにトランスパイルするプログラムが動きました。","uuid":"520"}]}]},{"class":"Block","uuid":"521","childs":[{"class":"RawText","content":" 🎉","uuid":"522"}]}]}]},{"class":"NewLine","uuid":"523"},{"class":"Block","uuid":"524","childs":[{"class":"Block","uuid":"525","childs":[{"class":"RawText","content":"もはやあとは作業ゲーで、これを気合いで拡張していけば完成です。","uuid":"526"}]}]},{"class":"NewLine","uuid":"527"},{"class":"Block","uuid":"528","childs":[{"class":"Block","uuid":"529","childs":[{"class":"RawText","content":"ひとまず、どんな言語にするか考えてみることにします。","uuid":"530"}]}]},{"class":"NewLine","uuid":"531"},{"class":"NewLine","uuid":"532"},{"class":"Header","level":"2","uuid":"533","childs":[{"class":"Block","uuid":"534","childs":[{"class":"Block","uuid":"535","childs":[{"class":"RawText","content":"言語の設計","uuid":"536"}]}]}]},{"class":"Header","level":"3","uuid":"537","childs":[{"class":"Block","uuid":"538","childs":[{"class":"Block","uuid":"539","childs":[{"class":"RawText","content":"イメージ","uuid":"540"}]}]}]},{"class":"NewLine","uuid":"541"},{"class":"Block","uuid":"542","childs":[{"class":"Block","uuid":"543","childs":[{"class":"RawText","content":"さて、本格的に言語を作り始めます。","uuid":"544"}]}]},{"class":"NewLine","uuid":"545"},{"class":"Block","uuid":"546","childs":[{"class":"Block","uuid":"547","childs":[{"class":"RawText","content":"だいたい、次の要素を含むプログラミング言語を作ることにします","uuid":"548"}]}]},{"class":"NewLine","uuid":"549"},{"class":"ListBlock","uuid":"550","childs":[{"class":"Item","uuid":"551","childs":[{"class":"Block","uuid":"552","childs":[{"class":"Block","uuid":"553","childs":[{"class":"RawText","content":"基本的な二項演算(四則演算, 剰余, べき乗, 比較演算)","uuid":"554"}]}]}]},{"class":"Item","uuid":"555","childs":[{"class":"Block","uuid":"556","childs":[{"class":"Block","uuid":"557","childs":[{"class":"RawText","content":"変数","uuid":"558"}]}]}]},{"class":"Item","uuid":"559","childs":[{"class":"Block","uuid":"560","childs":[{"class":"Block","uuid":"561","childs":[{"class":"Block","uuid":"563","childs":[{"class":"RawText","content":"関数定義 / 呼び出し / ","uuid":"564"}]},{"class":"InlineCodeBlock","code":"return","uuid":"562"},{"class":"Block","uuid":"565","childs":[{"class":"RawText","content":"","uuid":"566"}]}]}]}]},{"class":"Item","uuid":"567","childs":[{"class":"Block","uuid":"568","childs":[{"class":"Block","uuid":"569","childs":[{"class":"RawText","content":"ブロック","uuid":"570"}]}]}]},{"class":"Item","uuid":"571","childs":[{"class":"Block","uuid":"572","childs":[{"class":"Block","uuid":"573","childs":[{"class":"Block","uuid":"575","childs":[{"class":"Block","uuid":"577","childs":[{"class":"RawText","content":"","uuid":"578"}]},{"class":"InlineCodeBlock","code":"while","uuid":"576"},{"class":"Block","uuid":"579","childs":[{"class":"RawText","content":", ","uuid":"580"}]}]},{"class":"InlineCodeBlock","code":"if","uuid":"574"},{"class":"Block","uuid":"581","childs":[{"class":"RawText","content":"","uuid":"582"}]}]}]}]},{"class":"Item","uuid":"583","childs":[{"class":"Block","uuid":"584","childs":[{"class":"Block","uuid":"585","childs":[{"class":"RawText","content":"整数, 浮動小数点数, 文字列　あたりのリテラル","uuid":"586"}]}]}]}]},{"class":"NewLine","uuid":"587"},{"class":"Block","uuid":"588","childs":[{"class":"Block","uuid":"589","childs":[{"class":"RawText","content":"これだけあれば十分実用的な感じの言語な感じがします。","uuid":"590"}]}]},{"class":"Block","uuid":"591","childs":[{"class":"Block","uuid":"592","childs":[{"class":"RawText","content":"構文は、元の実装を参考にしてよくある感じの波括弧を使うものにすると、だいたいイメージとしては以下のように ","uuid":"593"}]}]},{"class":"Block","uuid":"594","childs":[{"class":"Block","uuid":"595","childs":[{"class":"RawText","content":"FizzBuzz が書ける言語を作るのが目標になります。　結構見た目は立派な言語ですね。","uuid":"596"}]}]},{"class":"NewLine","uuid":"597"},{"class":"NewLine","uuid":"598"},{"class":"CodeBlock","code":"function fizzbuzz(n) {\u000a    i = 0\u000a    while (i < 100){\u000a        i = i + 1\u000a        if (i % 15 == 0) {\u000a            println(\u0022FizzBuzz\u0022)\u000a        } elseif (i % 3 == 0) {\u000a            println(\u0022Fizz\u0022)\u000a        } elseif (i % 5 == 0) {\u000a            println(\u0022Buzz\u0022)\u000a        } else {\u000a            println(i)\u000a        }\u000a    }\u000a}\u000a\u000afizzbuzz(100)\u000a","language":"julia","uuid":"599"},{"class":"NewLine","uuid":"600"},{"class":"Header","level":"3","uuid":"601","childs":[{"class":"Block","uuid":"602","childs":[{"class":"Block","uuid":"603","childs":[{"class":"RawText","content":"PEG.jl による記述","uuid":"604"}]}]}]},{"class":"NewLine","uuid":"605"},{"class":"Block","uuid":"606","childs":[{"class":"Block","uuid":"607","childs":[{"class":"RawText","content":"あとは対応を考えてえいやえいやと文法を定義します、","uuid":"608"}]}]},{"class":"NewLine","uuid":"609"},{"class":"Block","uuid":"610","childs":[{"class":"Block","uuid":"611","childs":[{"class":"RawText","content":"例えば自然数リテラルはこんな感じになります。","uuid":"612"}]}]},{"class":"NewLine","uuid":"613"},{"class":"CodeBlock","code":"@rule int = (\u000a                r\u00220\u0022p, \u000a                r\u0022[1-9]\u0022 & r\u0022[0-9]\u0022[*]\u000a            )\u000a","language":"julia","uuid":"614"},{"class":"NewLine","uuid":"615"},{"class":"Block","uuid":"616","childs":[{"class":"Block","uuid":"617","childs":[{"class":"RawText","content":"定義したら REPL に送って試してみます。","uuid":"618"}]}]},{"class":"NewLine","uuid":"619"},{"class":"CodeBlock","code":"julia> parse_whole(int, \u00220\u0022)\u000a\u00220\u0022\u000a\u000ajulia> parse_whole(int, \u0022123\u0022)\u000a2-element Vector{Any}:\u000a \u00221\u0022\u000a Any[\u00222\u0022, \u00223\u0022]\u000a\u000ajulia> parse_whole(int, \u002201\u0022)\u000aERROR: ParseError(\u0022On line 1, at column 1 (byte 1):\u005cn01\u005cn^ here\u005cnexpected one of the following: r\u005c\u0022^(0)\u005c\u005cs*\u005c\u0022, int\u005cn\u0022)\u000aStacktrace:\u000a [1] parse_next(rule::typeof(int), input::String; whole::Bool)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:394\u000a [2] parse_whole(rule::Function, input::String)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:401\u000a [3] top-level scope\u000a   @ REPL[25]:1\u000a","language":"julia","uuid":"620"},{"class":"NewLine","uuid":"621"},{"class":"Block","uuid":"622","childs":[{"class":"Block","uuid":"623","childs":[{"class":"Block","uuid":"625","childs":[{"class":"Block","uuid":"627","childs":[{"class":"RawText","content":"いい感じですね。リテラルはJuliaのASTでもそのまま表現は変わりませんから、普通に ","uuid":"628"}]},{"class":"InlineCodeBlock","code":"parse","uuid":"626"},{"class":"Block","uuid":"629","childs":[{"class":"RawText","content":" で ","uuid":"630"}]}]},{"class":"InlineCodeBlock","code":"Int","uuid":"624"},{"class":"Block","uuid":"631","childs":[{"class":"RawText","content":" に変換してしまいます。 ","uuid":"632"}]}]}]},{"class":"NewLine","uuid":"633"},{"class":"Block","uuid":"634","childs":[{"class":"Block","uuid":"635","childs":[{"class":"Block","uuid":"637","childs":[{"class":"RawText","content":"こんな感じの再帰的に ","uuid":"638"}]},{"class":"InlineCodeBlock","code":"Vector","uuid":"636"},{"class":"Block","uuid":"639","childs":[{"class":"RawText","content":" を flatten して結合してくれるやつを用意しておくと便利です。","uuid":"640"}]}]}]},{"class":"NewLine","uuid":"641"},{"class":"CodeBlock","code":"julia> recjoin(arr::AbstractArray) = join(recjoin.(arr))\u000arecjoin (generic function with 2 methods)\u000a\u000ajulia> recjoin(s::AbstractString) =  s\u000arecjoin (generic function with 2 methods)\u000a\u000ajulia> build_int(w::AbstractArray) = parse(Int, recjoin(w))\u000abuild_int (generic function with 3 methods)\u000a\u000ajulia> @rule int = (\u000a                       r\u00220\u0022p, \u000a                       r\u0022[1-9]\u0022 & r\u0022[0-9]\u0022[*]\u000a                   ) |> build_int\u000aint (generic function with 2 methods)\u000a\u000ajulia> parse_whole(int, \u0022123\u0022)\u000a123\u000a","language":"julia","uuid":"642"},{"class":"NewLine","uuid":"643"},{"class":"Block","uuid":"644","childs":[{"class":"Block","uuid":"645","childs":[{"class":"RawText","content":"浮動小数点数リテラルも同様に定義します。","uuid":"646"}]}]},{"class":"NewLine","uuid":"647"},{"class":"CodeBlock","code":"julia> @rule float = (\u000a                       r\u0022[0-9]\u0022[+] & r\u0022.\u0022 & r\u0022[0-9]\u0022[+]\u000a                   ) |> build_float\u000afloat (generic function with 2 methods)\u000a\u000ajulia> parse_whole(float, \u002212.3\u0022)\u000a12.3\u000a\u000ajulia> parse_whole(float, \u00220.1\u0022)\u000a0.1\u000a\u000ajulia> parse_whole(float, \u00223\u0022)\u000aERROR: ParseError(\u0022On line 1, at column 2 (byte 2):\u005cn3\u005cn ^ here\u005cnexpected one of the following: r\u005c\u0022^([0-9])\u005c\u0022, r\u005c\u0022^(.)\u005c\u0022\u005cn\u0022)\u000aStacktrace:\u000a [1] parse_next(rule::typeof(float), input::String; whole::Bool)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:394\u000a [2] parse_whole(rule::Function, input::String)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:401\u000a [3] top-level scope\u000a   @ REPL[64]:1\u000a\u000ajulia> parse_whole(float, \u0022.3\u0022)\u000aERROR: ParseError(\u0022On line 1, at column 1 (byte 1):\u005cn.3\u005cn^ here\u005cnexpected one of the following: r\u005c\u0022^([0-9])\u005c\u0022, float\u005cn\u0022)\u000aStacktrace:\u000a [1] parse_next(rule::typeof(float), input::String; whole::Bool)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:394\u000a [2] parse_whole(rule::Function, input::String)\u000a   @ PEG ~/.julia/packages/PEG/ruwsb/src/PEG.jl:401\u000a [3] top-level scope\u000a   @ REPL[65]:1\u000a","language":"julia","uuid":"648"},{"class":"NewLine","uuid":"649"},{"class":"Block","uuid":"650","childs":[{"class":"Block","uuid":"651","childs":[{"class":"RawText","content":"これで数字リテラルが使えるようになりました。 表記に応じて適切なパースができています。","uuid":"652"}]}]},{"class":"NewLine","uuid":"653"},{"class":"CodeBlock","code":"julia> @rule num = float, int\u000anum (generic function with 2 methods)\u000a\u000ajulia> parse_whole(num, \u0022123.45\u0022)\u000a123.45\u000a\u000ajulia> parse_whole(int, \u0022123\u0022)\u000a123\u000a","language":"","uuid":"654"},{"class":"NewLine","uuid":"655"},{"class":"NewLine","uuid":"656"},{"class":"Block","uuid":"657","childs":[{"class":"Block","uuid":"658","childs":[{"class":"Block","uuid":"660","childs":[{"class":"RawText","content":"さて、今回は浮動小数点数の左右(?)の省略は許さないことにしたので ","uuid":"661"}]},{"class":"InlineCodeBlock","code":"\u0022.3\u0022","uuid":"659"},{"class":"Block","uuid":"662","childs":[{"class":"RawText","content":" がエラーになるのは意図した挙動ですが、","uuid":"663"}]}]}]},{"class":"Block","uuid":"664","childs":[{"class":"Block","uuid":"665","childs":[{"class":"RawText","content":"どうしてもこういう場合意図した挙動にできてるかを見逃してしまいがちです。","uuid":"666"}]}]},{"class":"NewLine","uuid":"667"},{"class":"NewLine","uuid":"668"},{"class":"Block","uuid":"669","childs":[{"class":"Block","uuid":"670","childs":[{"class":"RawText","content":"なので、構文を定義して動かす前に必ずテストケースを十分用意しておきましょう。","uuid":"671"}]}]},{"class":"NewLine","uuid":"672"},{"class":"Block","uuid":"673","childs":[{"class":"Block","uuid":"674","childs":[{"class":"Block","uuid":"676","childs":[{"class":"Block","uuid":"678","childs":[{"class":"Block","uuid":"680","childs":[{"class":"Block","uuid":"682","childs":[{"class":"RawText","content":"テストケース作る ","uuid":"683"}]},{"class":"InlineMath","expr":"\u005cto","uuid":"681"},{"class":"Block","uuid":"684","childs":[{"class":"RawText","content":" 構文一個作る ","uuid":"685"}]}]},{"class":"InlineMath","expr":"\u005cto","uuid":"679"},{"class":"Block","uuid":"686","childs":[{"class":"RawText","content":" テストケース通る ","uuid":"687"}]}]},{"class":"InlineMath","expr":"\u005cto","uuid":"677"},{"class":"Block","uuid":"688","childs":[{"class":"RawText","content":" 次の構文一個作る ","uuid":"689"}]}]},{"class":"InlineMath","expr":"\u005ccdots","uuid":"675"},{"class":"Block","uuid":"690","childs":[{"class":"RawText","content":" のループを踏まなかった人には等しく死が訪れます。","uuid":"691"}]}]}]},{"class":"NewLine","uuid":"692"},{"class":"Block","uuid":"693","childs":[{"class":"Block","uuid":"694","childs":[{"class":"RawText","content":"例えばこんな感じの実装の仕方がありそうです。","uuid":"695"}]}]},{"class":"NewLine","uuid":"696"},{"class":"CodeBlock","code":"using PEG\u000ausing Test\u000a\u000aonfail(body, _::Test.Pass) = true\u000aonfail(body, _::Union{Test.Fail,Test.Error}) = body()\u000a\u000atestcases = [\u000a    (\u00221\u0022, int) => (isequal(1)),\u000a    (\u002210\u0022, int) => (isequal(10)),\u000a]\u000a\u000a\u000afunction check(src, rule, expected)\u000a    ast = parse(src, rule=rule)\u000a    result = eval(ast)\u000a    success = expected(result)\u000a    onfail(@test success) do\u000a        @info \u0022Failed. Expected: $expected, got: $result\u0022   \u000a        @info \u0022AST: $ast\u0022\u000a    end\u000aend\u000a\u000a\u000a@testset \u0022Testset\u0022 begin\u000a    for ((src, rule), expected) in testcases\u000a        @info \u0022Test for... \u005cn$src\u0022\u000a        check(src, rule, expected)\u000a    end\u000aend\u000a","language":"julia","uuid":"697"},{"class":"NewLine","uuid":"698"},{"class":"Block","uuid":"699","childs":[{"class":"Block","uuid":"700","childs":[{"class":"Block","uuid":"702","childs":[{"class":"Block","uuid":"704","childs":[{"class":"RawText","content":"","uuid":"705"}]},{"class":"InlineCodeBlock","code":"isequal(x)","uuid":"703"},{"class":"Block","uuid":"706","childs":[{"class":"RawText","content":" は ","uuid":"707"}]}]},{"class":"InlineCodeBlock","code":"x","uuid":"701"},{"class":"Block","uuid":"708","childs":[{"class":"RawText","content":" と等しいか判定する関数を返してくれます. ","uuid":"709"}]}]}]},{"class":"Block","uuid":"710","childs":[{"class":"Block","uuid":"711","childs":[{"class":"RawText","content":"値を直接書いて比較するより、この形で書いておくとエラーさえ起きなければいい、とか割と自由にテストを書けるので便利です。","uuid":"712"}]}]},{"class":"NewLine","uuid":"713"},{"class":"Block","uuid":"714","childs":[{"class":"Block","uuid":"715","childs":[{"class":"RawText","content":"正直これ以上はもはや書くことがあんまりなく、","uuid":"716"}]}]},{"class":"NewLine","uuid":"717"},{"class":"ListBlock","uuid":"718","childs":[{"class":"Item","uuid":"719","childs":[{"class":"Block","uuid":"720","childs":[{"class":"Block","uuid":"721","childs":[{"class":"Block","uuid":"723","childs":[{"class":"RawText","content":"","uuid":"724"}]},{"class":"InlineCodeBlock","code":"@rule","uuid":"722"},{"class":"Block","uuid":"725","childs":[{"class":"RawText","content":" で構文を定義","uuid":"726"}]}]}]}]},{"class":"Item","uuid":"727","childs":[{"class":"Block","uuid":"728","childs":[{"class":"Block","uuid":"729","childs":[{"class":"RawText","content":"REPL に送ってパースしてみて吐かれる解析結果を見る","uuid":"730"}]}]}]},{"class":"Item","uuid":"731","childs":[{"class":"Block","uuid":"732","childs":[{"class":"Block","uuid":"733","childs":[{"class":"RawText","content":"それの対応を見て、 AST を作る","uuid":"734"}]}]}]}]},{"class":"NewLine","uuid":"735"},{"class":"Block","uuid":"736","childs":[{"class":"Block","uuid":"737","childs":[{"class":"RawText","content":"というのを繰り返していけば良いです。","uuid":"738"}]}]},{"class":"NewLine","uuid":"739"},{"class":"Block","uuid":"740","childs":[{"class":"Block","uuid":"741","childs":[{"class":"RawText","content":"完成したものがこちらになります。　実装に詰まったら見てみてください。","uuid":"742"}]}]},{"class":"NewLine","uuid":"743"},{"class":"NewLine","uuid":"744"},{"class":"Block","uuid":"745","childs":[{"class":"Block","uuid":"746","childs":[{"class":"RawText","content":"<a href=\u0022https://github.com/abap34/Minia.jl\u0022><img src=\u0022https://gh-card.dev/repos/abap34/Minia.jl.svg?fullname=\u0022></a>","uuid":"747"}]}]},{"class":"NewLine","uuid":"748"},{"class":"NewLine","uuid":"749"},{"class":"Header","level":"2","uuid":"750","childs":[{"class":"Block","uuid":"751","childs":[{"class":"Block","uuid":"752","childs":[{"class":"RawText","content":"感想","uuid":"753"}]}]}]},{"class":"NewLine","uuid":"754"},{"class":"Block","uuid":"755","childs":[{"class":"Block","uuid":"756","childs":[{"class":"RawText","content":"もし自分が生まれるのが10年, 20年早かったら Lispとかどハマりしてそうだな〜　とおもいました","uuid":"757"}]}]},{"class":"NewLine","uuid":"758"},{"class":"NewLine","uuid":"759"},{"class":"Header","level":"2","uuid":"760","childs":[{"class":"Block","uuid":"761","childs":[{"class":"Block","uuid":"762","childs":[{"class":"RawText","content":"今日の一曲","uuid":"763"}]}]}]},{"class":"NewLine","uuid":"764"},{"class":"Block","uuid":"765","childs":[{"class":"Block","uuid":"766","childs":[{"class":"RawText","content":"<iframe width=\u0022560\u0022 height=\u0022315\u0022 src=\u0022https://www.youtube.com/embed/u5KV0B0teIA?si=BExLRLOYtO5nDJZj\u0022 title=\u0022YouTube video player\u0022 frameborder=\u00220\u0022 allow=\u0022accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\u0022 allowfullscreen></iframe>","uuid":"767"}]}]},{"class":"NewLine","uuid":"768"},{"class":"NewLine","uuid":"769"},{"class":"NewLine","uuid":"770"},{"class":"NewLine","uuid":"771"},{"class":"HorizontalLine","uuid":"772"},{"class":"NewLine","uuid":"773"},{"class":"NewLine","uuid":"774"},{"class":"Block","uuid":"775","childs":[{"class":"Block","uuid":"776","childs":[{"class":"Block","uuid":"778","childs":[{"class":"Block","uuid":"780","childs":[{"class":"RawText","content":"","uuid":"781"}]},{"class":"InlineMath","expr":"1","uuid":"779"},{"class":"Block","uuid":"782","childs":[{"class":"RawText","content":" 文脈自由文法の日本語のWikipediaに残ってるレスバの痕跡が好きです。 ","uuid":"783"}]}]},{"alt":"ref","class":"InlineUrl","url":"https://ja.wikipedia.org/wiki/%E6%96%87%E8%84%88%E8%87%AA%E7%94%B1%E6%96%87%E6%B3%95#cite_ref-3","uuid":"777"},{"class":"Block","uuid":"784","childs":[{"class":"RawText","content":"　","uuid":"785"}]}]}]},{"class":"NewLine","uuid":"786"},{"class":"NewLine","uuid":"787"},{"class":"Block","uuid":"788","childs":[{"class":"Block","uuid":"789","childs":[{"class":"RawText","content":"         ","uuid":"790"}]}]},{"class":"NewLine","uuid":"791"}]}
}

